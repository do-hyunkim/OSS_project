
5.27

# 조건문

if <조건문>
then
  <수행문>
  <수행문>
  <...> (가독성을 위한 tab)
fi 

- 들여쓰기는 스크랩트에서 가독성을 위해 하는게 좋다.
- if의 종료 상태(exit status)가 0이 되면 then 구문을 탄다.
- 종료 코드
  - 0 : 성공
  - 1, 2, 3, .... : 실패 (오류- 메뉴얼에서 확인가능)
- 종료 상태 확인하기
  $?
  ex) echo hello world; echo $?
  (echo hello world가 올바르게 작동하고 0이 출력된다는 것은 올바르게 
  작동했다는것)

- 파이프라인일 경우,
  프로그램 | 프로그램 | 프로그램 ...| 프로그램
    - 마지막 프로그램의 종료상태가 전체 파이프라인의 종료상태가 됨

  ## 참/거짓을 판단하는 플로그램
  test <True/False 비교문>
    - True일 경우 종료 상태 0으로 반환하는 프로그램
    - 비교하는 인수는 항상 띄어쓰기 할것
    - 같다 =
    - 테스트로 판별한 인수, 변수등은 모두 " " 감싼다.
      - null , 공백 등을 인식 못할수 있기 때문
  ex) 
  if test "name" = "name"
  then
  echo yes
  fi 
  이렇게하면 yes 출력

  ## Q. 이름 변수에 할당하고 빈값인지 확인하는 조건문 작성
  name="kimdohyeon"
  if test "$name" = " "
  then
  echo 빈 값
  fi

  if test -z $name
  then
  echo 빈 값
  fi

  ## 문자열 비교연산자
  - 같다 =
  - 다르다 !=
  - str 
      if test "$name"
  - -n : is not null / nonzero
  - -z : is null / zero

  # test 표현식

  if [ -z $name ]      
  then
  echo 빈 값
  fi

  if test -z $name
  then
  echo 빈 값
  fi

  test 를 []로 대체가능

  - [,] 로 감싼다. "test" 프로그램 돌리는 표현식
  - 앞뒤로 공백 넣기

  ## Q. 표현식으로 바꾸고 종료상태 확인하는 코드 보내기
  name="kimdohyeon"
  if test "$name" = " "
  then
  echo 빈 값
  fi  

  name="kimdohyeon"
  if [ -z $name ]
  then echo 빈값
  fi
  echo $?

  ## 수치비교
  num1, num2
  -eq: equal (같음)
  -ne: not equal (같지 않음)
  -gt: greater than (초과)
  -lt: less than (미만)
  -ge: greater than or equal to (이상)
  -le: less than or equal to (이하)

  [ num1 -eq num2]

## Q. count라는 변수 원하는 숫자넣고, 10보다 작은지 판단하는 조건문 작성
A.
count=4 (count="4"이렇게하면 4를 문자열로 인식해서 안됨)
if [ $count -lt 10 ]
then 
echo yes
fi

## Q. 스크립트 : count
전체 인수가 0이 아닐 때, "프로그램을 실행합니다" 라는 문구를 출력하는 조건문 작성하기.

vi count

# 종료 프로그램
exit n
- 셸 종료 코드 지정
- exit 프로그램을 사용하지 않으면 마지막 프로그램의 종료 상태가 반환된다. 

count=4
if [ $count  -gt 0 ] && [ $count -lt 10]
then
  echo 0~10사이
  exit 0
else
  exit 1
fi

## else
if [ ]
then   >> True / 무시
  cmd1
  cmd2
else   >> 무시 / True
  cmd3 
fi

## elif
if [ ]
then
  cmd1
elif[ ]
then
  cmd2
else
  cmd3
fi

### Q. 시간을 기준으로 인사하는 프로그램 만들기
12시(24=00시)- 9시 굿모닝
9시 - 5시(17시) 굿애프터눈
5시(17시) - 12시(24시=00시) 굿이브닝
+ 종료상태 설정

#!/bin/bash

time=$(date+%H)
time=$((time+9))
if[ $time -gt 0] && [ $time -le 9]
then
  echo 굿모닝
  exit 0
elif [ $time -gt 9] && [ $time -le 17]
then
  echo 굿애프터눈
  exit 1
else
  echo 굿이브닝
  exit 2
fi 


# 파일 비교
- 파일의 형태, 빈 파일인지, 권환 등등 판별하는 연산자
- 구조: <옵션> <디록토리/파일>
- 종류 :
   - -d tmp/ : tmp/가 디렉토리인가
        [ -d tmp/ ]
   - -f : 파일
   - -s : 파일이 비어있지 않은지
   - -x : executable
   - -w : writable
   - -r : readable
   - -e : exists

## 논리 부정 연산자
[ ! -x file ] 

##
(조건1) and/or (조건2)
-a  (and)
-o  (or)
[ -r file -a -eq 4 ]   
- and에서 주의할 것!
  - 조건1이 False면 조건2는 안 탄다.
  - 그래서 먼저 필터팅해야할것은 조건1에 넣어야함.

## Q. 0 < $x <10 인지?

x=
if [ $x -gt 0 -a $x -lt 10]
then 
  echo yes
else 
  echo no
fi

## Q. $name 이 널값이 아니거나 #file이 읽기가능할 경우

if [ -z $name -o -r #file ]

if [ \(! $name= = null)\] -o \($name -r \)] (명령문오류 이스케이프 확인)
-괄호는 이스케이프 필요함
-띄어쓰기는 주의
- A or B and C 라면 and가우선

# case 표현식
- 여러 조건을 비교할 경우 사용한다.
1) jan
2) feb
3) ...
12) dec

dog)개
cat)고양이

case 값
in
  패턴 1) cmd
          cmd;; #패턴1일경우에 세미콜런(2개) 전까지 명령수행
  패턴 2) cmd
  * ) 그 외의 값
esac #case 꺼꾸로 쓴것

- 매칭 되는 패턴 없으면 아무것도 실행하지 않는다.

## Q. count2 확장하기
- 인수가 없으면 오류로 종료
- 인수가 1개면 실행
  - 숫자를 달로 환산하기
  1 -> Jan
  2 -> Feb
  ..
- 인수가 2개 이상이면 오류로 종료



## Q. 숫자, 대문자, 소문자, 특수문자 판별하는 스크립트 마늘기
A. [0-9] ) echo "숫자입니다" ;;


### 패턴이 여러개일 경우
패턴1 | 패턴2 | 명령문 ;;

## 시간으로 인사하기 => case로 바꿔보기

##
if[ ]
then 
  :
else
fi

: 아무것도 하지 말기(pass)

## &&, ||
프로그램 && 프로그램 : 1이 성공하면 2를 실행하라
-  || : 1이 실패하면 2를 수행하라.

file을 정렬하고 file에 저장하라.
  ex)echo hello && mc file1 file2

if [판별1 && 판별2 ] 이때 &&는 연산자
판별1 && 판별 2 이렇게 됬을때는 위에꺼

### Q. $file이 존재하지 않으면(empty,null) /etc/passwd를 변수 $file에 할당하라.

-z $file && $file=/etc/passwd

if [ ! -e $file]
then
file=/etc/passwwd
fi

- 프로그램1 && 프로그램2 || 프로그램3
